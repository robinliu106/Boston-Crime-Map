{"version":3,"sources":["components/CrimeTab.js","components/getIncidents.js","components/GoogleMap.js","actions/dateAction.js","actions/incidentAction.js","reducers/incidentReducer.js","reducers/dateReducer.js","store/configureStore.js","index.js"],"names":["CrimeTab","connect","state","date","props","console","log","axios","get","then","res","cleanRecords","data","result","records","filter","record","Lat","Long","className","incidentDescription","incidentDate","moment","format","center","href","lat","lng","target","incidentStreet","mapStyles","width","height","dispatch","setDate","type","setIncidents","incidents","GoogleApiWrapper","apiKey","process","REACT_APP_GOOGLE_MAPS_API_KEY","useState","mapCenter","setMapCenter","crimeRecords","setCrimeRecords","incidentDetails","setIncidentDetails","calendarDate","setCalendarDate","mapRef","useRef","getCurrentCenter","locations","map","incident","crimeLocation","latitude","parseFloat","longitude","push","centerLocation","getCenterOfBounds","useEffect","query","length","getCrimeRecords","resetSidebar","handleCircleClick","description","street","location","id","onLoad","current","google","zoom","style","disableDefaultUI","draggable","onClick","scrollwheel","radius","onMouseover","onMouseout","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","key","_id","OFFENSE_DESCRIPTION","OCCURRED_ON_DATE","STREET","onChange","maxDate","Date","incidentsDefaultState","incidentReducer","action","dateDefaultState","dateReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","jsx","GoogleMap","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.050a0b37.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nconst CrimeTab = (props) => {\n    return (\n        <div>\n            <section className=\"hero is-info\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">\n                        <h1>{props.incidentDescription ? props.incidentDescription : \"\"}</h1>\n                    </p>\n                    <p className=\"subtitle\">\n                        {props.incidentDate ? moment(props.incidentDate).format(\"dddd, MMMM Do YYYY, h:mm a\") : \"\"}\n                    </p>\n                    <p className=\"subtitle\">\n                        {\" \"}\n                        {props.center ? (\n                            <a\n                                href={`https://www.google.com/maps/search/?api=1&query=${props.center.lat},${props.center.lng}`}\n                                target=\"_blank\"\n                            >\n                                {props.incidentStreet}\n                            </a>\n                        ) : (\n                            \"\"\n                        )}\n                    </p>\n                </div>\n            </section>\n        </div>\n    );\n};\n\nexport default CrimeTab;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { setIncidents } from \"../actions/incidentAction\";\n\n// import { setCrimes } from \"../actions/crimes\";\nexport const getIncidents = (props) => {\n    console.log(\"running get INcidents\");\n\n    let query =\n        \"https://data.boston.gov/api/3/action/datastore_search?resource_id=12cb3883-56f5-47de-afa5-3b1cf61b257b&q=\";\n\n    // if (calendarDate) {\n    //TODO\n    // if (props.date !== undefined) {\n    //     query += props.date;\n    // } else {\n    //     query += new moment().format(\"YYYY-MM-DD\");\n    // }\n    // console.log(props);\n\n    console.log(\"hi\", props.date);\n\n    axios.get(query).then((res) => {\n        const records = res.data.result.records;\n\n        const cleanRecords = records.filter((record) => {\n            return record.Lat || record.Long;\n        });\n        console.log(\"clean records\", cleanRecords);\n        // setCrimeRecords(cleanRecords);\n\n        //TODO\n        // if (records.length > 0) {\n        //     getCurrentCenter(cleanRecords);\n        // }\n        // props.setIncidents([\"hihih\"]);\n        // props.setIncidents(cleanRecords);\n    });\n};\n\n// getIncidents();\n\nconst mapStateToProps = (state) => {\n    return { date: state.date };\n};\n\n// const mapDispatchToProps = (dispatch) => ({\n//     setIncidents: (incidents) => dispatch(setIncidents(incidents)),\n// });\n\nexport default connect(mapStateToProps)(getIncidents);\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Circle, SearchBox } from \"google-maps-react\";\n\nimport moment from \"moment\";\nimport { getCenterOfBounds } from \"geolib\";\n\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\n\nimport axios from \"axios\";\n\nimport { setDate } from \"../actions/dateAction\";\nimport { setIncidents } from \"../actions/incidentAction\";\n\nimport { getIncidents } from \"../components/getIncidents\";\n\nimport CrimeTab from \"./CrimeTab\";\nimport \"../Map.css\";\n\nconst mapStyles = {\n    width: \"100%\",\n    height: \"100%\",\n    // position: \"relative\",\n};\n\nconst MapContainer = (props) => {\n    const [mapCenter, setMapCenter] = useState({});\n    const [crimeRecords, setCrimeRecords] = useState([]);\n\n    const [incidentDetails, setIncidentDetails] = useState({});\n\n    const [calendarDate, setCalendarDate] = useState();\n    const mapRef = useRef();\n\n    const getCrimeRecords = (props) => {\n        let query =\n            \"https://data.boston.gov/api/3/action/datastore_search?resource_id=12cb3883-56f5-47de-afa5-3b1cf61b257b&q=\";\n\n        if (calendarDate) {\n            query += calendarDate;\n        } else {\n            query += new moment().format(\"YYYY-MM-DD\");\n        }\n\n        axios.get(query).then((res) => {\n            const records = res.data.result.records;\n\n            const cleanRecords = records.filter((record) => {\n                return record.Lat || record.Long;\n            });\n            console.log(\"clean records\", cleanRecords);\n            setCrimeRecords(cleanRecords);\n\n            if (records.length > 0) {\n                getCurrentCenter(cleanRecords);\n            }\n        });\n    };\n\n    const getCurrentCenter = (records) => {\n        // console.log(\"get\", records);\n        const locations = [];\n        records.map((incident) => {\n            const crimeLocation = {\n                latitude: parseFloat(incident.Lat),\n                longitude: parseFloat(incident.Long),\n            };\n\n            locations.push(crimeLocation);\n        });\n\n        console.log(\"locations\", locations);\n\n        const centerLocation = getCenterOfBounds(locations);\n\n        setMapCenter({\n            latitude: centerLocation.latitude,\n            longitude: centerLocation.longitude,\n        });\n    };\n\n    useEffect(() => {\n        getCrimeRecords();\n        // getIncidents();\n        // console.log(\"mapCenter\", mapCenter);\n        console.log(\"incidentDetails\", incidentDetails);\n    }, [incidentDetails]); //\n\n    const resetSidebar = () => {\n        setIncidentDetails({});\n    };\n\n    const mapClicked = () => {\n        resetSidebar();\n    };\n\n    const handleCircleClick = (props) => {\n        console.log(\"circle clicked\");\n\n        setIncidentDetails({\n            description: props.incidentDescription,\n            date: props.incidentDate,\n            street: props.incidentStreet,\n            location: props.center,\n        });\n    };\n\n    const handleCalendarChange = (date) => {\n        console.log(moment(date).format(\"YYYY-MM-DD\"));\n        setCalendarDate(moment(date).format(\"YYYY-MM-DD\"));\n        props.setDate(moment(date).format(\"YYYY-MM-DD\"));\n\n        resetSidebar();\n    };\n\n    const handleOnLoad = (map) => {\n        return (mapRef.current = map);\n    };\n\n    const handleCenterChanged = () => {\n        console.log(\"handle center changed\");\n\n        if (!mapRef.current) {\n            return;\n        }\n        console.log(mapRef.current.getCenter().toJSON()); /*setMapCenter(mapRef.getCenter().toJSON())*/\n    };\n\n    return (\n        <div className=\"main\">\n            <div id=\"mapBox\">\n                <Map\n                    onLoad={handleOnLoad}\n                    google={props.google}\n                    zoom={14}\n                    style={mapStyles}\n                    disableDefaultUI={true}\n                    draggable={false}\n                    center={{\n                        lat: mapCenter.latitude || 42.345095,\n                        lng: mapCenter.longitude || -71.103415,\n                    }}\n                    onClick={mapClicked}\n                    scrollwheel={false}\n                    // onCenterChanged={handleCenterChanged}\n                >\n                    {crimeRecords.map((incident) => {\n                        const crimeLocation = {\n                            lat: parseFloat(incident.Lat),\n                            lng: parseFloat(incident.Long),\n                        };\n\n                        return (\n                            <Circle\n                                radius={100}\n                                center={crimeLocation}\n                                onMouseover={() => console.log(\"mouseover\")}\n                                onClick={handleCircleClick}\n                                onMouseout={() => console.log(\"mouseout\")}\n                                strokeColor=\"transparent\"\n                                strokeOpacity={0}\n                                strokeWeight={5}\n                                fillColor=\"#FF4500\"\n                                fillOpacity={0.8}\n                                key={incident._id}\n                                incidentDescription={incident.OFFENSE_DESCRIPTION}\n                                incidentDate={incident.OCCURRED_ON_DATE}\n                                incidentStreet={incident.STREET}\n                            />\n                        );\n                    })}\n                </Map>\n            </div>\n\n            <div className=\"sidebar\">\n                <div>\n                    <Calendar onChange={handleCalendarChange} maxDate={new Date()} />\n                </div>\n                <div className=\"crimeTab\">\n                    <CrimeTab\n                        incidentDescription={incidentDetails.description}\n                        incidentDate={incidentDetails.date}\n                        incidentStreet={incidentDetails.street}\n                        center={incidentDetails.location}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    date: state.date,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    setDate: (date) => dispatch(setDate(date)),\n    setIncidents: (incidents) => dispatch(setIncidents(incidents)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    GoogleApiWrapper({\n        apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    })(MapContainer)\n);\n","export const setDate = (date) => ({\n    type: \"SET_DATE\",\n    date,\n});\n","import getIncidents from \"../components/getIncidents\";\n\nexport const setIncidents = (incidents) => ({\n    type: \"SET_INCIDENTS\",\n    incidents,\n});\n","// import { combineReducers } from \"redux\";\n\nconst incidentsDefaultState = {\n    incidents: [],\n};\n\nconst incidentReducer = (state = incidentsDefaultState, action) => {\n    switch (action.type) {\n        case \"SET_INCIDENTS\":\n            return { incidents: action.incidents };\n        default:\n            return state;\n    }\n};\n\nexport default incidentReducer;\n","// import { combineReducers } from \"redux\";\n\nconst dateDefaultState = {\n    date: \"\",\n};\n\nconst dateReducer = (state = dateDefaultState, action) => {\n    switch (action.type) {\n        case \"SET_DATE\":\n            return { date: action.date };\n        default:\n            return state;\n    }\n};\n\nexport default dateReducer;\n","import thunk from \"redux-thunk\";\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport incidentReducer from \"../reducers/incidentReducer\";\nimport dateReducer from \"../reducers/dateReducer\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n    const store = createStore(\n        combineReducers({\n            incidents: incidentReducer,\n            date: dateReducer,\n        }),\n        composeEnhancers(applyMiddleware(thunk))\n    );\n    return store;\n};\n\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import App from \"./App\";\nimport GoogleMap from \"./components/GoogleMap\";\n\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\n// import { incidentAction } from \"./actions/incidentAction\";\n// import { setIncidents } from \"./actions/incidentAction\";\nimport { getIncidents } from \"./components/getIncidents\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\n// getIncidents();\n\nconst store = configureStore();\n// getIncidents();\n\nconst jsx = (\n    <Provider store={store}>\n        <GoogleMap />\n    </Provider>\n);\n\nReactDOM.render(jsx, document.getElementById(\"root\"));\n"],"sourceRoot":""}